{"ast":null,"code":"var _jsxFileName = \"/Users/zhigangdeng/Projects/react-stock-dashboard/src/components/GraphCard.js\";\nimport React from 'react';\nimport Chart from 'chart.js';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.convertToDate = str => {\n      let date = new Date(str),\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n          day = (\"0\" + date.getDate()).slice(-2);\n      return [date.getFullYear(), mnth, day].join(\"-\");\n    };\n  }\n\n  componentDidUpdate() {\n    // @condition: check if there is a viable response from the API call\n    if (this.props.showGraphData) {\n      var lowOrHighColor = this.props.graphData.y_axis[0] < this.props.graphData.y_axis[this.props.graphData.y_axis.length - 1] ? '#81b737' : '#d54f4f'; // loops through all the graphData array and makes a graph individually\n\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          labels: this.props.graphData.x_axis,\n          datasets: [{\n            data: this.props.graphData.y_axis,\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            borderColor: lowOrHighColor\n          }]\n        },\n        options: {\n          responsive: true,\n          tooltips: {\n            enabled: true\n          },\n          tooltips: {\n            mode: 'point'\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: false\n              },\n              gridLines: {\n                display: true\n              },\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\"\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true,\n                stepSize: 5\n              },\n              gridLines: {\n                display: false\n              },\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\"\n              }\n            }]\n          },\n          legend: {\n            display: false\n          },\n          elements: {\n            point: {\n              radius: 0\n            }\n          }\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main__chart\",\n      id: 'myChart-' + this.props.graphData.stockValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"h5 mb-3 stockValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, this.props.graphData.stockValue, this.props.graphData.date_data ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 23\n      }\n    }, \"(\", this.convertToDate(this.props.graphData.date_data.filteredStartDate), \"\\xA0to\\xA0\", this.convertToDate(this.props.graphData.date_data.filteredEndDate), \")\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ml-2 d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }\n    }, \"(Last 72 Hours)\")), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\n;\nexport default GraphCard;","map":{"version":3,"sources":["/Users/zhigangdeng/Projects/react-stock-dashboard/src/components/GraphCard.js"],"names":["React","Chart","GraphCard","Component","chartRef","createRef","convertToDate","str","date","Date","mnth","getMonth","slice","day","getDate","getFullYear","join","componentDidUpdate","props","showGraphData","lowOrHighColor","graphData","y_axis","length","myChartRef","current","getContext","type","data","labels","x_axis","datasets","backgroundColor","borderColor","options","responsive","tooltips","enabled","mode","scales","xAxes","ticks","display","gridLines","color","yAxes","stepSize","legend","elements","point","radius","render","stockValue","date_data","filteredStartDate","filteredEndDate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\nimport '../css/GraphCard.css';\n\nclass GraphCard extends React.Component{\n\n  chartRef = React.createRef();\n    \n  componentDidUpdate() {\n    \n    // @condition: check if there is a viable response from the API call\n    if(this.props.showGraphData){\n      \n      var lowOrHighColor = \n          this.props.graphData.y_axis[0] <\n          this.props.graphData.y_axis[this.props.graphData.y_axis.length - 1] \n          ? '#81b737' : '#d54f4f';\n\n      // loops through all the graphData array and makes a graph individually\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n              labels: this.props.graphData.x_axis,\n              datasets: [\n                  {\n                      data: this.props.graphData.y_axis,\n                      backgroundColor: \"rgba(0, 0, 0, 0)\",\n                      borderColor: lowOrHighColor\n                  }\n              ]\n          },\n          options: {\n            responsive: true,\n            tooltips: {\n              enabled: true,\n            },\n            tooltips: {\n                mode: 'point'\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                      display: false\n                    },\n                    gridLines: {\n                      display: true\n                    },\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\"\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                      display: true,\n                      stepSize: 5\n                    },  \n                    gridLines: {\n                      display: false,\n                    },\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\"\n                    }\n                }]\n            },\n            legend: {\n                display: false\n            },\n            elements: {\n              point:{\n                  radius: 0\n              }\n            }\n          }\n      });\n    }\n  };\n\n  convertToDate = (str) => {\n    let date = new Date(str),\n      mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n      day = (\"0\" + date.getDate()).slice(-2);\n    return [date.getFullYear(), mnth, day].join(\"-\");\n  };\n\n  render() {\n      return (\n          <div className=\"main__chart\" id={ 'myChart-' + this.props.graphData.stockValue }>\n            <div>\n                <h2 className=\"h5 mb-3 stockValue\">\n                  { this.props.graphData.stockValue }\n                  { \n                    this.props.graphData.date_data \n                    ? \n                    <div className=\"ml-2 d-inline\">\n                      <span>\n                      (\n                      { this.convertToDate(this.props.graphData.date_data.filteredStartDate) } \n                      &nbsp;to&nbsp;\n                      { this.convertToDate(this.props.graphData.date_data.filteredEndDate) }\n                      )\n                      </span> \n                    </div>\n                    : <div className=\"ml-2 d-inline\">(Last 72 Hours)</div> \n                  }\n                </h2>\n                <canvas \n                  className=\"myChart\"\n                  ref={this.chartRef}\n                /> \n            </div>\n          </div>\n      )\n  }\n};\n\nexport default GraphCard;"]},"metadata":{},"sourceType":"module"}