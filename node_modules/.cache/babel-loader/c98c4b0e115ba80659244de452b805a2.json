{"ast":null,"code":"var _jsxFileName = \"/Users/zhigangdeng/Projects/react-stock-dashboard/src/components/App.js\";\nimport React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tableData: [],\n      graphData: [],\n      activeStockValue: '',\n      showFilterDOM: false,\n      showFilterData: false,\n      showTableData: false,\n      showGraphData: false,\n      lsArray: [],\n      option: []\n    };\n\n    this.sendSearchResult = data => {\n      if (data !== \"Symbol not supported\") {\n        this.setState({\n          tableData: this.state.tableData.concat(data),\n          showFilterDOM: true,\n          showTableData: true\n        });\n      }\n\n      ;\n    };\n\n    this.getFilteredData = (date, response_data) => {\n      let abc = this.state.graphData;\n      let converted_array = [];\n\n      for (let i = 0; i < abc.length; i++) {\n        let obj = abc[i];\n\n        if (response_data.stockValue.indexOf(obj.stockValue) !== -1) {\n          converted_array = [];\n\n          for (let i = 0; i < response_data.response.t.length; i++) {\n            converted_array.push(new Date(response_data.response.t[i] * 1000));\n          }\n\n          ;\n          abc.splice(i, 1);\n          abc.push({\n            stockValue: response_data.stockValue,\n            x_axis: converted_array,\n            y_axis: response_data.response.c,\n            date_data: {\n              filteredStartDate: new Date(date[0] * 1000),\n              filteredEndDate: new Date(date[1] * 1000)\n            }\n          });\n          this.setState({\n            graphData: abc,\n            activeStockValue: response_data.stockValue,\n            showGraphData: true\n          }, () => {\n            this.setState({\n              showGraphData: true\n            });\n          });\n        }\n\n        ;\n      }\n\n      ;\n    };\n\n    this.sendSearchGraphResult = (codeExist, graph_array) => {\n      if (codeExist != \"no_data\") {\n        let converted_array = [];\n        this.setState({\n          lsArray: this.state.lsArray.concat(graph_array.stockValue)\n        }, () => {\n          localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n        });\n\n        if (graph_array.response.s !== \"no_data\") {\n          for (let i = 0; i < graph_array.response.t.length; i++) {\n            converted_array.push(new Date(graph_array.response.t[i] * 1000));\n          }\n\n          ;\n          this.setState({\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              x_axis: converted_array,\n              y_axis: graph_array.response.c\n            }),\n            activeStockValue: graph_array.stockValue,\n            showGraphData: true\n          }, () => {\n            // this makes the second graph and above show\n            this.setState({\n              showGraphData: true\n            });\n          });\n        } else {\n          this.setState({\n            graphData: this.state.graphData.concat({\n              stockValue: graph_array.stockValue,\n              response: \"no_data\",\n              showGraphData: true\n            })\n          }, () => {\n            this.setState({\n              showGraphData: true\n            });\n          });\n        }\n      } else {\n        alert(\"Stock Code does not exist within the Database.\");\n        window.location.reload(true);\n      }\n\n      ;\n    };\n\n    this.checkStockCode = stockValue => {\n      this.state.graphData.map((graphData, index) => {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n        if (index === this.state.graphData.length - 1) {\n          document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n        }\n      });\n    };\n  }\n\n  // @desc: this componentDidUpdate is showing the latest graph which has \n  //        been searched and hiding the rest\n  componentDidUpdate() {\n    this.state.graphData.map((graphData, index) => {\n      document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n\n      if (index === this.state.graphData.length - 1) {\n        document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n      }\n    });\n  }\n\n  render() {\n    let graphCardDOM = '';\n    let optionSelectDOM = ''; // @condition: check if showGraphData is true\n\n    if (this.state.showGraphData) {\n      // loop through the data and make each graph\n      graphCardDOM = this.state.graphData.map((graphData, index) => {\n        if (graphData.response !== \"no_data\") {\n          return /*#__PURE__*/React.createElement(GraphCard, {\n            key: index,\n            tableData: this.state.tableData,\n            showGraphData: this.state.showGraphData,\n            showActiveStockCode: this.state.activeStockValue,\n            graphData: graphData,\n            filteredData: this.state.filteredData,\n            showFilterData: this.state.showFilterData,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }\n          });\n        } else {\n          return /*#__PURE__*/React.createElement(\"p\", {\n            key: index,\n            className: \"no-graph-data-message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 25\n            }\n          }, \"No Data Currently Available. Markets are closed during weekends and public holidays. Please filter by previous date.\");\n        }\n\n        ;\n      });\n    }\n\n    ; // @dom: show all the stock value as a option in select\n\n    optionSelectDOM = this.state.graphData.map((graphData, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: graphData.stockValue,\n        key: index,\n        defaultValue: this.state.graphData[this.state.graphData.length - 1] === graphData ? \"defaultValue\" : \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }\n      }, graphData.stockValue);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.showGraphData ? \"container-fluid app-container\" : \"container-fluid app-container height-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row app-container__row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 app-container__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-container__left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SearchCard, {\n      sendSearchResult: this.sendSearchResult,\n      sendSearchGraphResult: this.sendSearchGraphResult,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(FilterCard, {\n      showFilterDOM: this.state.showFilterDOM,\n      showGraphData: this.state.graphData,\n      showActiveStockCode: this.state.activeStockValue,\n      getFilteredData: this.getFilteredData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row table-data-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12 table-data-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableDataCard, {\n      showTableData: this.state.showTableData,\n      tableData: this.state.tableData,\n      graphData: this.state.graphData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/zhigangdeng/Projects/react-stock-dashboard/src/components/App.js"],"names":["React","SearchCard","FilterCard","TableDataCard","GraphCard","App","Component","state","tableData","graphData","activeStockValue","showFilterDOM","showFilterData","showTableData","showGraphData","lsArray","option","sendSearchResult","data","setState","concat","getFilteredData","date","response_data","abc","converted_array","i","length","obj","stockValue","indexOf","response","t","push","Date","splice","x_axis","y_axis","c","date_data","filteredStartDate","filteredEndDate","sendSearchGraphResult","codeExist","graph_array","localStorage","setItem","JSON","stringify","s","alert","window","location","reload","checkStockCode","map","index","document","querySelector","style","display","componentDidUpdate","render","graphCardDOM","optionSelectDOM","filteredData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SearchCard from './SearchCard';\nimport FilterCard from './FilterCard';\nimport TableDataCard from './TableDataCard';\nimport GraphCard from './GraphCard';\nimport '../css/styles.css';\n\nclass App extends React.Component{\n    \n    // TODO: load circle bar\n\n    state = {\n        tableData: [],\n        graphData: [],\n        activeStockValue: '',\n        showFilterDOM: false,\n        showFilterData: false,\n        showTableData: false,\n        showGraphData: false,\n        lsArray: [],\n        option: []\n    };\n\n    // @desc: this componentDidUpdate is showing the latest graph which has \n    //        been searched and hiding the rest\n    componentDidUpdate(){\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + graphData.stockValue).style.display = \"block\";\n            }\n        }); \n    };\n\n    // @desc: SearchCard.js does an API call and sends the relevant data for\n    //        the TableDataCard.js, through this you need to truesy the showFilterDOM,\n    //        and showTableData to show the user actual representable DOM.\n    // @param: data     => an object which has current, highest, lowest etc. values\n    //         response => {c: 289.07, h: 299, l: 285.85, o: 286.25, pc: 293.8, t: 1588487630}\n    sendSearchResult = (data) => {\n        if(data !== \"Symbol not supported\"){\n            this.setState({ \n                tableData: this.state.tableData.concat(data),\n                showFilterDOM: true,\n                showTableData: true\n            });\n        };\n    };\n\n    // @desc: FilterCard.js does an API call and sends the response_data which is the\n    //        stockValue and the actual response from the API. From this you want to \n    //        remove the old graph which was in the graphData and insert the new data.\n    //        This also adds readable date for the x_axis data.\n    // @params: date => start and end date of the filtered value\n    //          response_data => stockValue must be a string and response is an object\n    //          response      => {stockValue: stockValue, response: graph_response.data}\n    getFilteredData = (date, response_data) => {\n        let abc = this.state.graphData;\n        let converted_array = [];   \n        \n        for(let i = 0; i < abc.length; i++){\n            let obj = abc[i];\n\n            if(response_data.stockValue.indexOf(obj.stockValue) !== -1){\n                converted_array = [];\n                for(let i = 0; i < response_data.response.t.length; i++){\n                    converted_array.push(new Date(response_data.response.t[i] * 1000))\n                };\n                abc.splice(i, 1);\n                abc.push({\n                    stockValue: response_data.stockValue,\n                    x_axis: converted_array,\n                    y_axis: response_data.response.c,\n                    date_data: {\n                        filteredStartDate: new Date(date[0]*1000),\n                        filteredEndDate: new Date(date[1]*1000)\n                    }\n                });\n                this.setState({\n                    graphData: abc,\n                    activeStockValue: response_data.stockValue,\n                    showGraphData: true\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    })\n                });\n            };\n        };\n    };\n\n    // @desc: SearchCard.js does an API call and sends the graph_array which is the\n    //        stockValue and the actual response from the API. This changes the unix\n    //        time stamp to readable js time in the x_axis.\n    // @param: graph_array => stockValue must be a string and an object of response\n    //         response    => { stockValue: AAPL, response: {c: Array(179), h: Array(179) …} }\n    sendSearchGraphResult = (codeExist, graph_array) => {\n        if(codeExist != \"no_data\"){\n            let converted_array = [];\n        \n            this.setState({\n                lsArray: this.state.lsArray.concat(graph_array.stockValue)\n            }, () => {\n                localStorage.setItem('historyStockArray', JSON.stringify(this.state.lsArray));\n            });\n    \n            if(graph_array.response.s !== \"no_data\"){\n                for(let i = 0; i < graph_array.response.t.length; i++){\n                    converted_array.push(new Date(graph_array.response.t[i] * 1000))\n                };\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue,\n                        x_axis: converted_array,\n                        y_axis: graph_array.response.c,\n                    }),\n                    activeStockValue: graph_array.stockValue,\n                    showGraphData: true\n                }, () => {\n                    // this makes the second graph and above show\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }else{\n                this.setState({\n                    graphData: this.state.graphData.concat({\n                        stockValue: graph_array.stockValue, \n                        response: \"no_data\",\n                        showGraphData: true\n                    })\n                }, () => {\n                    this.setState({\n                        showGraphData: true\n                    });\n                });\n            }\n        }else{\n            alert(\"Stock Code does not exist within the Database.\");\n            window.location.reload(true);\n        };\n    };\n\n    // @desc: same as componentDidUpdate, hide all and display only that has been selected\n\n    // @param: stockValue => string of the select (e.g. AAPL)\n    checkStockCode = (stockValue) => {\n        this.state.graphData.map((graphData, index) => {\n            document.querySelector('#myChart-' + graphData.stockValue).style.display = \"none\";\n            if(index === this.state.graphData.length - 1){\n                document.querySelector('#myChart-' + stockValue).style.display = \"block\";\n            }\n        }); \n    }\n\n    render(){\n        let graphCardDOM = '';\n        let optionSelectDOM = '';\n\n        // @condition: check if showGraphData is true\n        if(this.state.showGraphData){\n            // loop through the data and make each graph\n            graphCardDOM = this.state.graphData.map((graphData, index) => {\n                if(graphData.response !== \"no_data\"){\n                    return (\n                        <GraphCard\n                            key = { index }\n                            tableData = { this.state.tableData }\n                            showGraphData = { this.state.showGraphData }\n                            showActiveStockCode = { this.state.activeStockValue }\n                            graphData = { graphData }\n                            filteredData = { this.state.filteredData }\n                            showFilterData = { this.state.showFilterData }>\n                        </GraphCard>\n                    );\n                }else{\n                    return(\n                        <p key={ index } \n                           className=\"no-graph-data-message\">\n                            No Data Currently Available. Markets are closed during weekends \n                            and public holidays. Please filter by previous date.\n                        </p>\n                    )\n                };\n            });\n        };\n  \n        // @dom: show all the stock value as a option in select\n        optionSelectDOM = this.state.graphData.map((graphData, index) => {\n            return (\n                <option \n                value={ graphData.stockValue } \n                key={ index }\n                defaultValue={ this.state.graphData[this.state.graphData.length - 1] === graphData ? \"defaultValue\" : \"\" }>\n                  { graphData.stockValue }\n                </option>\n            )\n        });\n\n        return (\n            <div className={ this.state.showGraphData ? \"container-fluid app-container\" : \"container-fluid app-container height-100\" }>\n                <div className=\"row app-container__row\">\n                    <div className=\"col-12 app-container__container\">\n                        <div className=\"app-container__left\">\n                            <SearchCard \n                                sendSearchResult = { this.sendSearchResult }\n                                sendSearchGraphResult = { this.sendSearchGraphResult }>\n                            </SearchCard>\n                            <FilterCard\n                                showFilterDOM = { this.state.showFilterDOM }\n                                showGraphData = { this.state.graphData }\n                                showActiveStockCode = { this.state.activeStockValue }\n                                getFilteredData = { this.getFilteredData }>\n                            </FilterCard>\n                        </div>\n                       \n                    </div>\n                </div>\n                <div className=\"row table-data-row\">\n                    <div className=\"col-12 table-data-col\">\n                        <TableDataCard \n                            showTableData = { this.state.showTableData }\n                            tableData = { this.state.tableData }\n                            graphData = { this.state.graphData }>\n                        </TableDataCard>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}